exon.d       <- integer(7)   # per strain total of exonic positions in deserts
exon.nd      <- integer(7)   # per strain total of exonic positions in nondeserts
exon.frac.d  <- numeric(7)   # per strain, fraction of desert positions that are exonic
exon.frac.nd <- numeric(7)   # per strain, fraction of nondesert positions that are exonic
snp.d5       <- integer(7)   # per strain total snps in deserts >5k
des5.len     <- integer(7)   # per strain total positions in deserts >5k
exon.d5      <- integer(7)   # per strain total of exonic positions in deserts >5k
des.df.new   <- vector('list',7) # per strain desert info
desert.data  <- vector('list',7) # per strain desert summary to plot
for(st in 1:7){
if(DEBUG){cat('st=',st,'\n')}
# calculate various summaries
st.name[st] <- sub('CCMP', '', st.loc(st)) # strain name/loc, trimmed of 'CCMP'
snp.tot[st] <- sum(snp.tables[[st]][,'snp'])
snp.c[st]   <- sum(snp.tables[[st]][,'snp']==1 & snp.tables[[st]][,'exon'])
snp.nc[st]  <- snp.tot[st] - snp.c[st]
if(oldschool){
n.deserts <- nrow(des[[st]][[1]])
} else {
n.deserts <- nrow(des.df[[st]])
}
if(DEBUG){cat('n.deserts=',n.deserts, '\n')}
des.lengths <- integer(n.deserts)
des.uncnv   <- integer(n.deserts)
if(oldschool){
des.lengths <- des[[st]][[1]][,'Length'] + 1
des.uncnv <- NA # inconvenient to calc with old tables
} else {
des.lengths <- des.df[[st]]$Length
if(is.null(cnv.deletions)){
des.uncnv <- NA
} else {
for(i in 1:n.deserts){
des.uncnv[i] <- des.lengths[i] -
sum(cnv.deletions[[st]][des.df[[st]]$iStart[i]:des.df[[st]]$iEnd[i]])
}
}
des.df.new[[st]] <- data.frame(des.df[[st]], Length.uncnv=des.uncnv) ## save it
if(DEBUG){print(str(des.df.new[[st]]))}
}
ex  <- integer(length = n.deserts)
snp <- integer(length = n.deserts)
# count exonic- and snp-positions per desert
for (i in 1:n.deserts){
if(oldschool){
ex[i]  <- sum(snp.tables[[st]][des[[st]][[1]][i,1]:(des[[st]][[1]][i,2]-1), 'exon'])
snp[i] <- sum(snp.tables[[st]][des[[st]][[1]][i,1]:(des[[st]][[1]][i,2]-1), 'snp'])
} else {
if(DEBUG){cat('des.irg=',des.df.new[[st]]$iStart[i],des.df.new[[st]]$iEnd[i],'\n')}
des.irange <- des.df.new[[st]]$iStart[i]:des.df.new[[st]]$iEnd[i]
ex[i]  <- sum(snp.tables[[st]][des.irange, 'exon'])
snp[i] <- sum(snp.tables[[st]][des.irange, 'snp'])
}
}
exon.d[st] <- sum(ex)
if(oldschool){
exon.d5[st]<- sum(ex[(des[[st]][[1]][,3]+1)>5000])
} else {
exon.d5[st]<- sum(ex[des.df.new[[st]]$Length>5000])
}
exon.nd[st]<- data.exon-exon.d[st]
snp.d[st]  <- sum(snp)
if(oldschool){
snp.d5[st] <- sum(snp[(des[[st]][[1]][,3]+1)>5000])
} else {
snp.d5[st] <- sum(snp[des.df.new[[st]]$Length>5000])
}
snp.nd[st] <- snp.tot[st]-snp.d[st]
if(oldschool){
des.len[st]       <- sum(des[[st]][[1]][,3]+1)
des.len.uncnv[st] <- NA
des5.len[st]      <- sum(des[[st]][[1]][(des[[st]][[1]][,3]+1)>5000,3]+1)
} else {
des.len[st]       <- sum(des.df.new[[st]]$Length)
des.len.uncnv[st] <- sum(des.df.new[[st]]$Length.uncnv)
des5.len[st]      <- sum(des.df.new[[st]]$Length[des.df.new[[st]]$Length>5000])
}
des.frac[st]     <- des.len[st]/data.len
exon.frac.d[st]  <- exon.d[st]/des.len[st]
exon.frac.nd[st] <- exon.nd[st]/(data.len-des.len[st])
if(oldschool){
desert.data[[st]] <- data.frame(dlen = log2(des[[st]][[1]][,3]+1),
snprate = 1000*snp/(des[[st]][[1]][,3]+1),
exfrac = ex/(des[[st]][[1]][,3]+1))
} else {
desert.data[[st]] <- data.frame(dlen = log2(des.df.new[[st]]$Length),
snprate = 1000*snp/des.df.new[[st]]$Length,
exfrac = ex/des.df.new[[st]]$Length)
}
}
des.dens.summary.df <- data.frame(
'all_exon_%'     = 100 * data.exon/data.len,                       # % exonic positions (all data)
'd_exon_%'       = 100 * exon.frac.d,                              #   ditto, in deserts
'nd_exon_%'      = 100 * exon.frac.nd,                             #   ditto, not in deserts
'des_%'          = 100 * des.frac,                                 # % desert positions (all data)
'tot_snps'       = snp.tot,                                        # total number of SNPs (all data)
'nonex_snps/Kb'  = 1000 * (snp.nc)/(data.len-data.exon),           # SNPS per kilobase, non-exons
'exon_snps/Kb'   = 1000 * snp.c/data.exon,                         #   ditto, exons
'ne:e_snp_ratio' = (snp.nc)/(data.len-data.exon)/(snp.c/data.exon),# ratio of those rates
'nd_snps/Kb'     = 1000*snp.nd/(data.len-des.len),                 # SNPS per kilobase, non-desert
'd_snps/Kb'      = 1000*snp.d/des.len,                             #   ditto, deserts
'nd:d_snp_ratio' = snp.nd / (data.len-des.len) / snp.d * des.len,  # ratio of those rates
'd5_exon_%'      = 100 * exon.d5 / des5.len,                       # % exonic in big deserts (> 5k)
'd5_snp/Kb'      = 1000 * snp.d5 / des5.len,                       # SNPS/Kb, in big deserts (> 5k)
des.len,                                                           # Tot desert length
des.len.uncnv,                                                     #   ditto, minus CNVnator dels
check.names=F
)
rownames(des.dens.summary.df) <- st.name
print(des.dens.summary.df,digits=3)
# return summary stats as a large blob;  all vars defined at the top of the function,  + summary
return(list(data.len=data.len,
data.exon=data.exon,
st.name=st.name,
snp.tot=snp.tot,
snp.c=snp.c,
snp.nc=snp.nc,
snp.d=snp.d,
snp.nd=snp.nd,
des.len=des.len,
des.len.uncnv=des.len.uncnv,
des.frac=des.frac,
exon.d=exon.d,
exon.nd=exon.nd,
exon.frac.d=exon.frac.d,
exon.frac.nd=exon.frac.nd,
snp.d5=snp.d5,
des5.len=des5.len,
exon.d5=exon.d5,
des.df.new=des.df.new,
desert.data=desert.data,
des.dens.summary.df=des.dens.summary.df
))
}
des.dens.plot <- function(ddb, DEBUG=FALSE){
# desert snp density plots.  Param 'ddb' is the 'desert density blob' returned by des.dens.calc.
# plot layout
opar <- par(oma=c(0,0,0,.8),mar=c(4.1,4.1,2,2),tck=-.02); on.exit(par(opar))
rows <- 3
cols <- ceiling(7/rows)
layout(matrix(c(1:7,8,8),nrow=3,ncol=3,byrow=T)) # more general than mfrow - doublewide 8th panel
# Two alternate plot styles.  exon fraction overlays on SNP rate plot, using right y axis;
#   alt=F scales their 0/1 from ymin to ymax;
#   alt=T uses only top part of y range, to minimize overplotting
# exfrac.xform function does this scaling.  Currently I prefer alt=T.  Might be even better to
# do two entirely separate, abutting subpanels, but that's fun for another day.
alt <- TRUE
ymin <- 0
ymax <- 6
if(alt){
exfrac.xform <- function(x,ymn=ymin,ymx=ymax){return(2*x + ymx-2)}
# par(oma=c(0,0,0,1.8)) # extra margin for axis label?
} else {
exfrac.xform <- function(x,ymn=ymin,ymx=ymax){return(ymn+(ymx-ymn)*x)}
}
for(st in 1:7){
if(DEBUG){cat('dd.plot: st=', st, '\n')}
row <- st %/% cols      # which row/column of plot grid are we building
col <- (st-1) %%  cols
ylab <- ifelse(col==0,'SNPs/Kb','')  # label y axis only in 1st column of plots
xlab <- 'log2(desert length)'
xmin <- 10
if(FALSE){
# stretch axis a bit in Italy/Wales?
xmax <- ifelse(st==3||st==6,16,18.5)
} else {
# no, common axis
xmax <- log2(3.3e5)
}
# Check that we don't clip.
# (Exon frac doesn't need to be checked; always in [0..1], & scaled appropriately.)
xrange <- range(ddb$desert.data[[st]]$dlen)
yrange <- range(ddb$desert.data[[st]]$snprate)
if(xrange[1] < xmin || xmax < xrange[2] || yrange[1] < ymin || ymax < yrange[2]){
cat('Some points in', st.loc(st), 'clipped;  xrange is', xrange, ', yrange is', yrange, '\n')
}
# main: per-desert snp rate vs desert length
if(DEBUG){cat('dd.plot: main plot\n')}
plot(snprate ~ dlen, data = ddb$desert.data[[st]], yaxt='n',
xlab=xlab, ylab=ylab, main='', pch='.', xlim=c(xmin,xmax), ylim=c(ymin,ymax))
# left y axis: first, axis & tics, then tick labels, to fine-tune positions
lticksat <- 0:4
axis(side=2,at=lticksat,labels=NA)
axis(side=2,at=lticksat,labels=(0:4),lwd=0,line=-.4)
# title
mtext(st.loc(st),cex=.6)
# global snp rate
text(xmax, ymax-.1,
paste('Overall SNPs/Kb', format(1000*ddb$snp.tot[st]/ddb$data.len,digits=3)),
cex=.6, pos=2)
# overlay per-desert exon fraction vs desert length
if(DEBUG){cat('dd.plot: exfrac plot\n')}
points(exfrac.xform(exfrac) ~ dlen, data = ddb$desert.data[[st]], pch='+', col='blue')
# Right y axis: first, axis & tics, then tick labels, to fine-tune positions
rticksat <- seq(exfrac.xform(0),exfrac.xform(1),length.out=5)
rlabels <- (0:4)/4
if(alt){rlabels[c(2,4)] <- ''} # sparser labels in more condensed 'alt'
axis(side=4,at=rticksat,labels=NA,col.axis='blue',col='blue')
axis(side=4,at=rticksat,labels=rlabels,col.axis='blue',col='blue',lwd=0,line=-.4)
if(col==cols-1 || row==rows-1){
# axis label only in last column plots
mtext('Exonic Fraction',side=4,col='blue',line=1.7,cex=.7,adj=ifelse(alt,1,NA))
}
# global exon fraction
if(DEBUG){cat('dd.plot: abline\n')}
abline(h=exfrac.xform(ddb$data.exon/ddb$data.len), col='blue',lty=2,lwd=.5)
# look at loess smooth of both data sets
pi <- order(ddb$desert.data[[st]]$dlen)
snp.lo <- loess(snprate ~ dlen, data=ddb$desert.data[[st]])
lines(ddb$desert.data[[st]]$dlen[pi], snp.lo$fitted[pi], col='red')
ex.lo <- loess(exfrac.xform(exfrac) ~ dlen, data=ddb$desert.data[[st]])
lines(ddb$desert.data[[st]]$dlen[pi], ex.lo$fitted[pi], col='green')
# replot snp rates as '.' to ameliorate overplotting?
# points(log2(ddb$desert.data[[st]]$dlen),ddb$desert.data[[st]]$snprate,pch='.')
# v line at len=5k
abline(v=log2(5000),lwd=0.5,lty=2,col='yellow')
}
# make legend
if(DEBUG){cat('dd.plot: legend\n')}
plot(0,0,type='n',bty='n',axes=F,xlab=NA,ylab=NA)
if(ddb$data.len == genome.length.constants()$chr1.length){
scope <- 'Chr1'
} else {
scope <- 'full'
}
legend('center',cex=1.2,title=paste('SNP rates/Exonic fractions per desert,', scope),
legend=c('SNPs per Kb  (left axis) vs desert length',
'Exonic fraction (right axis) vs desert length ',
'Exonic fraction (right axis), overall',
'Loess smooth of SNP rate (left axis)',
'Loess smooth of exonic fraction (right axis) ',
'Length 5k'),
bty='o',
lwd=c(NA,NA,1,1,1,1),lty=c(0,0,2,1,1,2),
pch=      c(   '.',    '+',     NA,    NA,      NA,       NA),
col=     c('black', 'blue', 'blue', 'red', 'green', 'yellow'),
text.col=c('black', 'blue', 'blue', 'red', 'green', 'yellow'))
}
ddb.chr1 <- des.dens.calc(chr1.only = TRUE, oldschool = FALSE, cnv.deletions=cnv.dels.08.chr1)
des.dens.plot(ddb.chr1)
dd1ny <- ddb.chr1$desert.data[[1]]
colnames(dd1ny)[1] <- 'log2(desert.length)'
pairs(dd1ny)
if(!is.null(snp.tables.full)){
ddb.full <- des.dens.calc(chr1.only = FALSE, cnv.deletions = cnv.dels.08.full,
snp.tables = snp.tables.full)
des.dens.plot(ddb.full)
}
ddfullny <- ddb.full$desert.data[[1]]
colnames(ddfullny)[1] <- 'log2(desert.length)'
pairs(ddfullny, pch='.')
sz <- 'scriptsize' ; fw <- 6.5 ; fh <- 5 ; fa <- 'center' # knitr params: size, fig.{width,height,align}
print(getOption('width'))
snp.rates(length.thresh=3000, strain=7, nc=F, length.thresh.eff=F,
snp.tables=snp.tables.chr1, des.tables=des, cnv.dels=cnv.dels.08.chr1)
snp.rates(length.thresh=3000, strain=6, nc=F, length.thresh.eff=F,
snp.tables=snp.tables.chr1, des.tables=des, cnv.dels=cnv.dels.08.chr1)
if(!is.null(snp.tables.full)){
des.df.new <- ddb.full$des.df.new # desert tables as data frames
des.df.sorted <- vector('list',7) # sorted by length
for(st in 1:7){
permute <- order(des.df.new[[st]]$Length.uncnv,decreasing=T)
des.df.sorted[[st]] <- des.df.new[[st]][permute,c(1:3,5,6,4,7)]
names(des.df.sorted[[st]])[7] <- 'Len.eff' # shorten name
}
keep.cols <- c(2,4,6,7)
n <- 30
# n largest
bign <- NULL
for(st in c(1,2,4,5,7,3,6)){
perm <- order(des.df.sorted[[st]]$iStart[1:n])
one.strain.topn <- data.frame(Chr=as.character(des.df.sorted[[st]]$Chr[1:n][perm]),
des.df.sorted[[st]][1:n, keep.cols][perm,],
stringsAsFactors = FALSE)
mins <- apply(one.strain.topn[1:n,c('Length','Len.eff')],2,min)
maxs <- apply(one.strain.topn[1:n,c('Length','Len.eff')],2,max)
one.strain.topn <-
rbind(one.strain.topn,
data.frame(Chr=c('Min:','Max:'),
Start=rep(NA,2),
iStart=rep(NA,2),
Length=c(mins[1],maxs[1]),
Len.eff=c(mins[2],maxs[2])))
if(is.null(bign)){
bign <- one.strain.topn
} else {
bign <- cbind(bign, one.strain.topn)
}
}
rownames(bign) <- NULL
cat('Largest 30 deserts per strain; ordered', substr(st.locs(1:7,loc=F), 5,8)[c(1,2,4,5,7,3,6)], '\n')
print(bign)
write.csv(bign,'bign.csv')
# lost due to CNV/NA:
cbind( d1007=bign[,4]-bign[,5],
d1012=bign[,9]-bign[,10],
d1014=bign[,14]-bign[,15],
d1015=bign[,19]-bign[,20],
d1335=bign[,24]-bign[,25],
d1013=bign[,29]-bign[,30],
d3367=bign[,34]-bign[,35]
)
}
# Some generic desert stats
dsum.df <- rbind(
summary(des.df[[1]]$Length),
summary(des.df[[2]]$Length),
summary(des.df[[3]]$Length),
summary(des.df[[4]]$Length),
summary(des.df[[5]]$Length),
summary(des.df[[6]]$Length),
summary(des.df[[7]]$Length)
)
row.names(dsum.df) <- names(des.df)
dsum.df <- cbind(N=unlist(lapply(des.df,nrow)),dsum.df)
print(dsum.df)
des.vs.non <- function(fig.file.path, strain=7, length.thresh=50000,
length.thresh.eff=T, nc=F, yclip=NULL,
xlab=NULL, ylab=NULL, main=NULL, legend=NULL, panel=NULL, des.col='dodgerblue2',
cnv.dels=cnv.dels.08.full, des.tables=des, snp.tables=snp.tables.full){
pdf(fig.file.path,width=6.5, height=2.1) # was 3.1
# par seemingly must be set via par, after pdf() call.
opar <- par(no.readonly=TRUE,oma=c(0,0,0,0),mar=c(3,3,1,1),tcl=-0.2)
on.exit(par(opar))
xx <- snp.rates(strain=strain, length.thresh=length.thresh,
length.thresh.eff=length.thresh.eff, nc=nc, yclip=yclip,
xlab=xlab, ylab=ylab, main=main, legend=legend, des.col=des.col,
cnv.dels=cnv.dels, des.tables=des.tables, snp.tables=snp.tables)
if(!is.null(panel)){
text(0.62,0.0092,panel,cex=1.1) # for 2B, coords empirically set to roughly match rel pos in panel 2A
}
dev.off()
return(xx)
}
#@
#{\footnotesize Hmmm...; I tried ``dodgerblue2'' to match fig 2A, but it looks a fair bit paler in this context, so back to ``blue''}
#%  source('~/Documents/g/projects/thaps/Thaps_7_strains/code/snpNB/R/wlr.R')
# <<>>=
if(exists('snp.tables.full')){
xx <- des.vs.non('figs-mine/Fig2B-bigdes-snpdens-ny.pdf', strain=7,
length.thresh=50000, length.thresh.eff=T, nc=F,
yclip=0.01, legend='', panel='B', main='', des.col='blue3',
xlab='Desert Index', ylab='SNP Density')
print(xx)
}
xx <- c(180, 183, 186, 190, 150, 304, 291)
xx[6,7]/xx[1]
xx[6..7]/xx[1]
xx[6:7]/xx[1]
c(xx[6:7]/xx[1],xx[6:7]/xx[2],xx[6:7]/xx[3],xx[6:7]/xx[4])
median(c(xx[6:7]/xx[1],xx[6:7]/xx[2],xx[6:7]/xx[3],xx[6:7]/xx[4]))
mean(xx[6:7]/xx[1])
93481/(38232+9777+620)
c(93481,84335)/(38232+9777+620)
xx <- des.vs.non('figs-mine/Fig2B-bigdes-snpdens-ny.pdf', strain=7,
length.thresh=50000, length.thresh.eff=T, nc=F,
yclip=0.01, legend='', panel='B', main='', des.col='blue3',
xlab='Desert Index', ylab='SNP Density (SNPS/bp')
source('~/Documents/g/projects/thaps/Thaps_7_strains/code/snpNB/R/wlr.R')
if(exists('snp.tables.full')){
xx <- des.vs.non('figs-mine/Fig2B-bigdes-snpdens-ny.pdf', strain=7,
length.thresh=50000, length.thresh.eff=T, nc=F,
yclip=0.01, legend='', panel='B', main='', des.col='blue3',
xlab='Desert Index', ylab='SNP Density (SNPS/bp')
print(xx)
}
source('~/Documents/g/projects/thaps/Thaps_7_strains/code/snpNB/R/wlr.R')
# <<>>=
if(exists('snp.tables.full')){
xx <- des.vs.non('figs-mine/Fig2B-bigdes-snpdens-ny.pdf', strain=7,
length.thresh=50000, length.thresh.eff=T, nc=F,
yclip=0.01, legend='', panel='B', main='', des.col='blue3',
xlab='Desert Index', ylab='SNP Density (SNPS/bp')
print(xx)
}
source('~/Documents/g/projects/thaps/Thaps_7_strains/code/snpNB/R/wlr.R')
# <<>>=
if(exists('snp.tables.full')){
xx <- des.vs.non('figs-mine/Fig2B-bigdes-snpdens-ny.pdf', strain=7,
length.thresh=50000, length.thresh.eff=T, nc=F,
yclip=0.01, legend='', panel='B', main='', des.col='blue3',
xlab='Desert Index', ylab='SNP Density (SNPS/bp')
print(xx)
}
des.vs.non <- function(fig.file.path, strain=7, length.thresh=50000,
length.thresh.eff=T, nc=F, yclip=NULL,
xlab=NULL, ylab=NULL, ylab.sub=NULL, main=NULL, legend=NULL, panel=NULL,
des.col='dodgerblue2',
cnv.dels=cnv.dels.08.full, des.tables=des, snp.tables=snp.tables.full){
pdf(fig.file.path,width=6.5, height=2.1) # was 3.1
# par seemingly must be set via par, after pdf() call.
opar <- par(no.readonly=TRUE,oma=c(0,0,0,0),mar=c(3,3,1,1),tcl=-0.2)
on.exit(par(opar))
xx <- snp.rates(strain=strain, length.thresh=length.thresh,
length.thresh.eff=length.thresh.eff, nc=nc, yclip=yclip,
xlab=xlab, ylab=ylab, ylab.sub=ylab.sub, main=main, legend=legend,
des.col=des.col,
cnv.dels=cnv.dels, des.tables=des.tables, snp.tables=snp.tables)
if(!is.null(panel)){
text(0.62,0.0092,panel,cex=1.1) # for 2B, coords empirically set to roughly match rel pos in panel 2A
}
dev.off()
return(xx)
}
#@
#{\footnotesize Hmmm...; I tried ``dodgerblue2'' to match fig 2A, but it looks a fair bit paler in this context, so back to ``blue''}
source('~/Documents/g/projects/thaps/Thaps_7_strains/code/snpNB/R/wlr.R')
# <<>>=
if(exists('snp.tables.full')){
xx <- des.vs.non('figs-mine/Fig2B-bigdes-snpdens-ny.pdf', strain=7,
length.thresh=50000, length.thresh.eff=T, nc=F,
yclip=0.01, legend='', panel='B', main='', des.col='blue3',
xlab='Desert Index', ylab='SNP Density',
ylab.sub=list(text='(SNPS/bp)', line=1.2, cex=.7))
print(xx)
}
des.vs.non <- function(fig.file.path, strain=7, length.thresh=50000,
length.thresh.eff=T, nc=F, yclip=NULL,
xlab=NULL, ylab=NULL, ylab.sub=NULL, main=NULL, legend=NULL, panel=NULL,
des.col='dodgerblue2',
cnv.dels=cnv.dels.08.full, des.tables=des, snp.tables=snp.tables.full){
pdf(fig.file.path,width=6.5, height=2.1) # was 3.1
# par seemingly must be set via par, after pdf() call.
opar <- par(no.readonly=TRUE,oma=c(0,0,0,0),mar=c(3,3,1,1),tcl=-0.2)
on.exit(par(opar))
xx <- snp.rates(strain=strain, length.thresh=length.thresh,
length.thresh.eff=length.thresh.eff, nc=nc, yclip=yclip,
xlab=xlab, ylab=ylab, ylab.sub=ylab.sub, main=main, legend=legend,
des.col=des.col,
cnv.dels=cnv.dels, des.tables=des.tables, snp.tables=snp.tables)
if(!is.null(panel)){
text(0.62,0.0092,panel,cex=1.1) # for 2B, coords empirically set to roughly match rel pos in panel 2A
}
dev.off()
return(xx)
}
#@
#{\footnotesize Hmmm...; I tried ``dodgerblue2'' to match fig 2A, but it looks a fair bit paler in this context, so back to ``blue''}
source('~/Documents/g/projects/thaps/Thaps_7_strains/code/snpNB/R/wlr.R')
# <<>>=
if(exists('snp.tables.full')){
xx <- des.vs.non('figs-mine/Fig2B-bigdes-snpdens-ny.pdf', strain=7,
length.thresh=50000, length.thresh.eff=T, nc=F,
yclip=0.01, legend='', panel='B', main='', des.col='blue3',
xlab='Desert Index', ylab='SNP Density',
ylab.sub=list(text='(SNPS/bp)', line=1.1, cex=.8))
print(xx)
}
des.vs.non <- function(fig.file.path, strain=7, length.thresh=50000,
length.thresh.eff=T, nc=F, yclip=NULL,
xlab=NULL, ylab=NULL, ylab.sub=NULL, main=NULL, legend=NULL, panel=NULL,
des.col='dodgerblue2',
cnv.dels=cnv.dels.08.full, des.tables=des, snp.tables=snp.tables.full){
pdf(fig.file.path,width=6.5, height=2.1) # was 3.1
# par seemingly must be set via par, after pdf() call.
opar <- par(no.readonly=TRUE,oma=c(0,0,0,0),mar=c(3,3,1,1),tcl=-0.2)
on.exit(par(opar))
xx <- snp.rates(strain=strain, length.thresh=length.thresh,
length.thresh.eff=length.thresh.eff, nc=nc, yclip=yclip,
xlab=xlab, ylab=ylab, ylab.sub=ylab.sub, main=main, legend=legend,
des.col=des.col,
cnv.dels=cnv.dels, des.tables=des.tables, snp.tables=snp.tables)
if(!is.null(panel)){
text(0.62,0.0092,panel,cex=1.1) # for 2B, coords empirically set to roughly match rel pos in panel 2A
}
dev.off()
return(xx)
}
#@
#{\footnotesize Hmmm...; I tried ``dodgerblue2'' to match fig 2A, but it looks a fair bit paler in this context, so back to ``blue''}
source('~/Documents/g/projects/thaps/Thaps_7_strains/code/snpNB/R/wlr.R')
# <<>>=
if(exists('snp.tables.full')){
xx <- des.vs.non('figs-mine/Fig2B-bigdes-snpdens-ny.pdf', strain=7,
length.thresh=50000, length.thresh.eff=T, nc=F,
yclip=0.01, legend='', panel='B', main='', des.col='blue3',
xlab='Desert Index', ylab='SNP Density',
ylab.sub=list(text='(SNPS / bp)', line=1.1, cex=.8))
print(xx)
}
des.vs.non <- function(fig.file.path, strain=7, length.thresh=50000,
length.thresh.eff=T, nc=F, yclip=NULL,
xlab=NULL, ylab=NULL, ylab.sub=NULL, main=NULL, legend=NULL, panel=NULL,
des.col='dodgerblue2',
cnv.dels=cnv.dels.08.full, des.tables=des, snp.tables=snp.tables.full){
pdf(fig.file.path,width=6.5, height=2.1) # was 3.1
# par seemingly must be set via par, after pdf() call.
opar <- par(no.readonly=TRUE,oma=c(0,0,0,0),mar=c(3,3,1,1),tcl=-0.2)
on.exit(par(opar))
xx <- snp.rates(strain=strain, length.thresh=length.thresh,
length.thresh.eff=length.thresh.eff, nc=nc, yclip=yclip,
xlab=xlab, ylab=ylab, ylab.sub=ylab.sub, main=main, legend=legend,
des.col=des.col,
cnv.dels=cnv.dels, des.tables=des.tables, snp.tables=snp.tables)
if(!is.null(panel)){
text(0.62,0.0092,panel,cex=1.1) # for 2B, coords empirically set to roughly match rel pos in panel 2A
}
dev.off()
return(xx)
}
#@
#{\footnotesize Hmmm...; I tried ``dodgerblue2'' to match fig 2A, but it looks a fair bit paler in this context, so back to ``blue''}
source('~/Documents/g/projects/thaps/Thaps_7_strains/code/snpNB/R/wlr.R')
# <<>>=
if(exists('snp.tables.full')){
xx <- des.vs.non('figs-mine/Fig2B-bigdes-snpdens-ny.pdf', strain=7,
length.thresh=50000, length.thresh.eff=T, nc=F,
yclip=0.01, legend='', panel='B', main='', des.col='blue3',
xlab='Desert Index', ylab='SNP Density',
ylab.sub=list(text='(SNPS / bp)', line=1.1, cex=.75))
print(xx)
}
